// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "after user login user will seen this page with user informations",
                "tags": [
                    "Home"
                ],
                "summary": "api for showing home page of user",
                "operationId": "User Home",
                "responses": {
                    "200": {
                        "description": "Welcome Home"
                    }
                }
            }
        },
        "/account": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "tags": [
                    "User GetUserProfile"
                ],
                "summary": "api for see use details",
                "operationId": "FindUserProfile",
                "responses": {
                    "200": {
                        "description": "Successfully user account details found"
                    },
                    "500": {
                        "description": "faild to show user details",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "user can edit user details",
                "tags": [
                    "User Account"
                ],
                "summary": "api for edit user details",
                "operationId": "UpdateUserProfile",
                "parameters": [
                    {
                        "description": "input field",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.EditUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully updated user details",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/account/address": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "user can show all address",
                "tags": [
                    "User Address"
                ],
                "summary": "api for get all address of user",
                "operationId": "FindAllAddresses",
                "responses": {
                    "200": {
                        "description": "successfully got user addresses",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "failed to show user addresses",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "user can change existing address",
                "tags": [
                    "User Address"
                ],
                "summary": "api for edit user address",
                "operationId": "UpdateAddress",
                "parameters": [
                    {
                        "description": "Input Field",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.EditAddress"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully addresses updated",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "can't update the address",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "get a new address from user to store the the database",
                "tags": [
                    "User Address"
                ],
                "summary": "api for adding a new address for user",
                "operationId": "AddAddress",
                "parameters": [
                    {
                        "description": "Input Field",
                        "name": "inputs",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.Address"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully address added",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin": {
            "get": {
                "tags": [
                    "Admin Home"
                ],
                "summary": "api admin home",
                "operationId": "AdminHome",
                "responses": {
                    "200": {
                        "description": "Admin home page",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/category": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "tags": [
                    "Admin Category"
                ],
                "summary": "api for admin get all categories",
                "operationId": "FindAllCategories",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Count",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully found all categories",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to find all categories",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "tags": [
                    "Admin Category"
                ],
                "summary": "api for adminstring add a new category",
                "operationId": "SaveCategory",
                "parameters": [
                    {
                        "description": "Input field",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Category"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully category added",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/category/sub-category": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "tags": [
                    "Admin Category"
                ],
                "summary": "api for admin add a new sub category",
                "operationId": "SaveSubCategory",
                "parameters": [
                    {
                        "description": "Input field",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Category"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully sub category added",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to add sub category",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/category/variation": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "tags": [
                    "Admin Category"
                ],
                "summary": "api for admin add a new variation",
                "operationId": "SaveVariation",
                "parameters": [
                    {
                        "description": "Input field",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.Variation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully variation added",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/category/variation-option": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "tags": [
                    "Admin Category"
                ],
                "summary": "api for admin add a new variation options",
                "operationId": "SaveVariationOption",
                "parameters": [
                    {
                        "description": "Input field",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.VariationOption"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully added variation option",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/category/variation/{category_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "tags": [
                    "Admin Category"
                ],
                "summary": "api for admin to find all variations and its values for a specific category",
                "operationId": "FindAllVariations",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category ID",
                        "name": "category_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully found all variations and its values",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/coupons": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "tags": [
                    "Admin Coupon"
                ],
                "summary": "api for admin to see all coupons",
                "operationId": "FindAllCoupons",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Count",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully go all the coupons",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "failed to get all coupons",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "tags": [
                    "Admin Coupon"
                ],
                "summary": "api for admin to update the coupon",
                "operationId": "UpdateCoupon",
                "parameters": [
                    {
                        "description": "Input Field",
                        "name": "inputs",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.EditCoupon"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated the coupon",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "tags": [
                    "Admin Coupon"
                ],
                "summary": "api for admin to add coupon",
                "operationId": "SaveCoupon",
                "parameters": [
                    {
                        "description": "Input Fields",
                        "name": "inputs",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.Coupon"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully coupon added",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/login": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "tags": [
                    "Admin Authentication"
                ],
                "summary": "api for admin to login",
                "operationId": "AdminLogin",
                "parameters": [
                    {
                        "description": "Input Fields",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully account created for user",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/offers": {
            "post": {
                "tags": [
                    "Offers"
                ],
                "summary": "api for admin to add new offer",
                "operationId": "SaveOffer",
                "parameters": [
                    {
                        "description": "input field",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.Offer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully offer added",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Offers"
                ],
                "summary": "api for admin to delete offer",
                "operationId": "SaveOffer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Offer ID",
                        "name": "offer_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully offer added",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/offers/": {
            "get": {
                "tags": [
                    "Offers"
                ],
                "summary": "api for show all offers",
                "operationId": "FindAllOffers",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Count",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully got all offers",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "faild to get offers",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/offers/category": {
            "get": {
                "tags": [
                    "Offers"
                ],
                "summary": "api for admin to get all offers of categories",
                "operationId": "FindAllCategoryOffers",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Count",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully got all offer_category",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "failed to get offers_category",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Offers"
                ],
                "summary": "api for admin to add offer for category",
                "operationId": "SaveCategoryOffer",
                "parameters": [
                    {
                        "description": "input field",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.OfferCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully offer added for category",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Offers"
                ],
                "summary": "api for admin to remove offer from a category",
                "operationId": "RemoveCategoryOffer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Offer Category ID",
                        "name": "offer_category_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully offer added for category",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/offers/category/replace": {
            "post": {
                "tags": [
                    "Offers"
                ],
                "summary": "api for admin to add offer for category",
                "operationId": "ReplaceCategoryOffer",
                "parameters": [
                    {
                        "description": "input field",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.OfferCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully offer replaced for category",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/offers/products": {
            "get": {
                "tags": [
                    "Offers"
                ],
                "summary": "api for admin to get all offers of products",
                "operationId": "FindAllProductsOffers",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Count",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully got all offers_categories",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "failed to get offer_products",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Offers"
                ],
                "summary": "api for admin to replace a new offer on an existing offer for a product",
                "operationId": "ReplaceProductOffer",
                "parameters": [
                    {
                        "description": "input field",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.OfferProduct"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully offer replaced for product",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Offers"
                ],
                "summary": "api for admin to add offer for product",
                "operationId": "SaveProductOffer",
                "parameters": [
                    {
                        "description": "input field",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.OfferProduct"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully offer added for product",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/offers/products/{offer_product_id}": {
            "delete": {
                "tags": [
                    "Offers"
                ],
                "summary": "api for admin to remove offer from product",
                "operationId": "RemoveProductOffer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "offer_product_id",
                        "name": "offer_product_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully offer removed from product",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input on params",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/orders": {
            "get": {
                "description": "admin can see all orders in application",
                "tags": [
                    "Admin Orders"
                ],
                "summary": "api for admin to show all order",
                "operationId": "FindAllShopOrders",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Count Of Order",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully found all shop orders",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to find all shop orders",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/orders/": {
            "put": {
                "description": "admin can change User Orders status",
                "tags": [
                    "Admin Orders"
                ],
                "summary": "api for admin to change the status of order",
                "operationId": "UpdateOrderStatus",
                "parameters": [
                    {
                        "description": "input field",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UpdateOrder"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully order status updated",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/orders/returns": {
            "get": {
                "tags": [
                    "Admin Orders"
                ],
                "summary": "api for admin to see all order returns",
                "operationId": "FindAllOrderReturns",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Count Of Order",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully found all order returns",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to find all order returns",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/orders/returns/pending": {
            "get": {
                "description": "admin can see the pending return request and accept it or not",
                "tags": [
                    "Admin Orders"
                ],
                "summary": "api for admin to show pending return request and update it",
                "operationId": "FindAllPendingReturns",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Count Of Order",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully found all pending orders return requests",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to find all pending order return requests",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "put": {
                "description": "admin can approve, cancel etc. updating on User Orders_return",
                "tags": [
                    "Admin Orders"
                ],
                "summary": "api for admin to update the order_return request from user",
                "operationId": "UpdateReturnRequest",
                "parameters": [
                    {
                        "description": "Input Fields",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UpdateOrderReturn"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully order_response updated",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/orders/statuses": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "tags": [
                    "Admin Orders"
                ],
                "summary": "api for admin to see all order statues for changing order's statuses",
                "operationId": "GetAllOrderStatuses",
                "responses": {
                    "200": {
                        "description": "Successfully found all order statuses",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "failed to get order statuses",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/payment-method": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "tags": [
                    "User Payment"
                ],
                "summary": "api for get all payment methods",
                "operationId": "FindAllPaymentMethods",
                "responses": {
                    "200": {
                        "description": "Failed to find payment methods",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Successfully found all payment methods",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "tags": [
                    "Admin Payment"
                ],
                "summary": "api for admin to update payment details",
                "operationId": "UpdatePaymentMethod",
                "responses": {
                    "200": {
                        "description": "Successfully payment method updated",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Failed to bind input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to update payment method",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/products": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "tags": [
                    "Admin Products"
                ],
                "summary": "api for admin to show products",
                "operationId": "FindAllProductsAdmin",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Count",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully found all products",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to find all products",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Admin Products"
                ],
                "summary": "api for admin to update a product",
                "operationId": "UpdateProduct",
                "parameters": [
                    {
                        "description": "inputs",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UpdateProduct"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully product updated",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Admin Products"
                ],
                "summary": "api for admin to update a product",
                "operationId": "SaveProduct",
                "parameters": [
                    {
                        "description": "inputs",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.Product"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully product added",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/products/product-items": {
            "post": {
                "tags": [
                    "Admin Products"
                ],
                "summary": "api for admin to add product-items for a specific product",
                "operationId": "SaveProductItem",
                "parameters": [
                    {
                        "description": "inputs",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.ProductItem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully product item added",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/products/product-items/{product_id}": {
            "get": {
                "tags": [
                    "User Products"
                ],
                "summary": "api for admin get all product_items for a product",
                "operationId": "FindAllProductItemsAdmin",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "product_id",
                        "name": "product_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully got all product_items for given product_id",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input on params",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/sales": {
            "get": {
                "tags": [
                    "Admin Sales"
                ],
                "summary": "api for admin to see full sales report and download it as csv",
                "operationId": "FullSalesReport",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Sales report starting date",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sales report ending date",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Count",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ecommerce_sales_report.csv",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "204": {
                        "description": "No sales report found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "failed to get sales report",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/stocks": {
            "get": {
                "tags": [
                    "Admin Stock"
                ],
                "summary": "api for admin to find all stock stock details",
                "operationId": "FindAllStocks",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Count",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully found all stocks",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "204": {
                        "description": "No stocks found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to find all stocks",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Admin Stock"
                ],
                "summary": "api for admin to update a stock",
                "operationId": "UpdateStock",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Order",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated sock",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Failed to bind input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to update stock",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/users": {
            "get": {
                "tags": [
                    "Admin User"
                ],
                "summary": "api for admin to find all users",
                "operationId": "FindAllUsers",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Count",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully got all users",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "204": {
                        "description": "No users found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to find all users",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/users/block": {
            "patch": {
                "tags": [
                    "Admin User"
                ],
                "summary": "api for admin to block or unblock user",
                "operationId": "BlockUser",
                "parameters": [
                    {
                        "description": "inputs",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.BlockUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully changed block status of user",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/carts": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "user can see all productItem that stored in cart",
                "tags": [
                    "User Cart"
                ],
                "summary": "api for get all cart item of user",
                "operationId": "FindCart",
                "responses": {
                    "200": {
                        "description": "Successfully find user cart items",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to get user cart",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "user can increment or decrement count of a productItem in cart (min=1)",
                "tags": [
                    "User Cart"
                ],
                "summary": "api for update product item count",
                "operationId": "UpdateCart",
                "parameters": [
                    {
                        "description": "Input Field",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UpdateCartItem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully productItem count change on cart"
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to update product item in cart",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/carts/checkout/payment-select-page": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "tags": [
                    "User Payment"
                ],
                "summary": "api for render the html page of payment select",
                "operationId": "CartOrderPaymentSelectPage",
                "responses": {
                    "200": {
                        "description": "successfully order placed",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to render payment page",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/carts/coupons": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "tags": [
                    "User Cart"
                ],
                "summary": "api user to apply on cart on checkout time",
                "operationId": "ApplyCouponToCart",
                "parameters": [
                    {
                        "description": "Input Field",
                        "name": "inputs",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.ApplyCoupon"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully coupon applied to user cart",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/carts/place-order/": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "tags": [
                    "User Cart"
                ],
                "summary": "api for user to place an order on cart with COD",
                "operationId": "PlaceOrderOnCOD",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Address ID",
                        "name": "address_id",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully order placed",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "failed to save shop order",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/carts/place-order/razorpay-checkout": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "tags": [
                    "User Cart"
                ],
                "summary": "api for create razorpay payment order",
                "operationId": "RazorpayCheckout",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Address ID",
                        "name": "address_id",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully razorpay payment order created",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "faild to create razorpay payment order",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/carts/place-order/razorpay-verify": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "tags": [
                    "User Cart"
                ],
                "summary": "api user for verify razorpay payment",
                "operationId": "RazorpayVerify",
                "parameters": [
                    {
                        "type": "string",
                        "description": "razorpay_order_id",
                        "name": "razorpay_order_id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "razorpay_payment_id",
                        "name": "razorpay_payment_id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "razorpay_signature",
                        "name": "razorpay_signature",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "shop_order_id",
                        "name": "shop_order_id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "payment_method_id",
                        "name": "payment_method_id",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "faild to veify payment",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "successfully payment completed and order approved",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/carts/{product_item_id}": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "user can add a stock in product to user cart",
                "tags": [
                    "User Cart"
                ],
                "summary": "api for user to add product item to cart",
                "operationId": "SaveToCart",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product Item ID",
                        "name": "product_item_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully product item added to cart",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Failed to add product item into cart",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "user can remove a signle productItem full quantity from cart",
                "tags": [
                    "User Cart"
                ],
                "summary": "api for remove a product item from cart",
                "operationId": "RemoveFromCart",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product Item ID",
                        "name": "product_item_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully product item removed form cart",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to remove product item from cart",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/coupons": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "tags": [
                    "User Coupon"
                ],
                "summary": "api for user to see all coupons",
                "operationId": "GetAllCouponsForUser",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Count Of Order",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully found all coupons for user",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to find all user",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Enter user_name | phone | email with password",
                "tags": [
                    "User Authentication"
                ],
                "summary": "api for user to login",
                "operationId": "UserLogin",
                "parameters": [
                    {
                        "description": "Input Fields",
                        "name": "inputs",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully logged in",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "failed to generate JWT",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/login/otp-send": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "user can enter email/user_name/phone will send an otp to user registered phone_number",
                "tags": [
                    "User Authentication"
                ],
                "summary": "api for user otp login send",
                "operationId": "UserLoginOtpSend",
                "parameters": [
                    {
                        "description": "Input Field",
                        "name": "inputs",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.OTPLogin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully otp send to user's registered number",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Enter input properly",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to send otp",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/login/otp-verify": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "enter your otp that send to your registered number",
                "tags": [
                    "User Authentication"
                ],
                "summary": "api for user to verify user login otp",
                "operationId": "UserLoginOtpVerify",
                "parameters": [
                    {
                        "description": "Input Field",
                        "name": "inputs",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.OTPVerify"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully logged in using otp",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid login_otp",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "failed to generate JWT",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "user can logout",
                "tags": [
                    "User Logout"
                ],
                "summary": "api for user to logout",
                "operationId": "UserLogout",
                "responses": {
                    "200": {
                        "description": "successfully logged out"
                    }
                }
            }
        },
        "/orders": {
            "get": {
                "description": "user can see all User Orders history",
                "tags": [
                    "User Orders"
                ],
                "summary": "api for showing User Orders list",
                "operationId": "GetUserOrder",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Count Of Order",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully found all shop orders",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to find all user shop orders",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/orders/items/{shop_order_id}": {
            "get": {
                "tags": [
                    "User Orders"
                ],
                "summary": "api for show order items of a specific order",
                "operationId": "FindAllOrderItems User",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Shop Order ID",
                        "name": "shop_order_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Count",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully found order items",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to find order items",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/orders/return": {
            "post": {
                "description": "user can request return for placed orders",
                "tags": [
                    "User Orders"
                ],
                "summary": "api for user to request a return for an order",
                "operationId": "SubmitReturnRequest",
                "parameters": [
                    {
                        "description": "Input Fields",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.Return"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully return request submitted for order",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/orders/{shop_order_id}": {
            "post": {
                "description": "user can cancel the order if it's not placed",
                "tags": [
                    "User Orders"
                ],
                "summary": "api for user to cancel the order",
                "operationId": "CancelOrder",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Shop Order ID",
                        "name": "shop_order_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully order cancelled",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input on param",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/products": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "tags": [
                    "User Products"
                ],
                "summary": "api for user to show products",
                "operationId": "FindAllProductsAdmin",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Count",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully found all products",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to find all products",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/products/product-items/{product_id}": {
            "get": {
                "tags": [
                    "User Products"
                ],
                "summary": "api for user get all product_items for a product",
                "operationId": "FindAllProductItems",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "product_id",
                        "name": "product_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully got all product_items for given product_id",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input on params",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/signup": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "tags": [
                    "User Authentication"
                ],
                "summary": "api for user to signup",
                "operationId": "UserSignUp",
                "parameters": [
                    {
                        "description": "Input Fields",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UserSignUp"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully account created for user",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/wishlist": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "tags": [
                    "Wishlist"
                ],
                "summary": "api get all wish list items of user",
                "operationId": "FindWishList",
                "responses": {
                    "200": {
                        "description": "Wish list is empty"
                    },
                    "400": {
                        "description": "failed to get user wish list items"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "tags": [
                    "Wishlist"
                ],
                "summary": "api to add a productItem to wish list",
                "operationId": "SaveToWishList",
                "parameters": [
                    {
                        "description": "product_item_id",
                        "name": "product_item_id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully added product item to wishlist",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "tags": [
                    "Wishlist"
                ],
                "summary": "api to remove a productItem from wish list",
                "operationId": "RemoveFromWishList",
                "responses": {
                    "200": {
                        "description": "successfully removed product item from wishlist",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.Category": {
            "type": "object",
            "required": [
                "category_name"
            ],
            "properties": {
                "category_id": {
                    "type": "integer"
                },
                "category_name": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 1
                }
            }
        },
        "request.Address": {
            "type": "object",
            "required": [
                "house",
                "land_mark",
                "name",
                "phone_number",
                "pincode"
            ],
            "properties": {
                "area": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "house": {
                    "type": "string"
                },
                "is_default": {
                    "type": "boolean"
                },
                "land_mark": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "phone_number": {
                    "type": "string",
                    "maxLength": 10,
                    "minLength": 10
                },
                "pincode": {
                    "type": "integer"
                }
            }
        },
        "request.ApplyCoupon": {
            "type": "object",
            "required": [
                "coupon_code"
            ],
            "properties": {
                "coupon_code": {
                    "type": "string"
                }
            }
        },
        "request.BlockUser": {
            "type": "object",
            "required": [
                "user_id"
            ],
            "properties": {
                "block": {
                    "type": "boolean"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "request.Coupon": {
            "type": "object",
            "required": [
                "coupon_name",
                "description",
                "discount_rate",
                "expire_date",
                "image",
                "minimum_cart_price"
            ],
            "properties": {
                "block_status": {
                    "type": "boolean"
                },
                "coupon_name": {
                    "type": "string",
                    "maxLength": 25,
                    "minLength": 3
                },
                "description": {
                    "type": "string",
                    "maxLength": 150,
                    "minLength": 6
                },
                "discount_rate": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 1
                },
                "expire_date": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "minimum_cart_price": {
                    "type": "integer",
                    "minimum": 1
                }
            }
        },
        "request.EditAddress": {
            "type": "object",
            "required": [
                "address_id",
                "house",
                "land_mark",
                "name",
                "phone_number",
                "pincode"
            ],
            "properties": {
                "address_id": {
                    "type": "integer"
                },
                "area": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "house": {
                    "type": "string"
                },
                "is_default": {
                    "type": "boolean"
                },
                "land_mark": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "phone_number": {
                    "type": "string",
                    "maxLength": 10,
                    "minLength": 10
                },
                "pincode": {
                    "type": "integer"
                }
            }
        },
        "request.EditCoupon": {
            "type": "object",
            "required": [
                "coupon_name",
                "description",
                "discount_rate",
                "expire_date",
                "image",
                "minimum_cart_price"
            ],
            "properties": {
                "block_status": {
                    "type": "boolean"
                },
                "coupon_id": {
                    "type": "integer"
                },
                "coupon_name": {
                    "type": "string",
                    "maxLength": 25,
                    "minLength": 3
                },
                "description": {
                    "type": "string",
                    "maxLength": 150,
                    "minLength": 6
                },
                "discount_rate": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 1
                },
                "expire_date": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "minimum_cart_price": {
                    "type": "integer",
                    "minimum": 1
                }
            }
        },
        "request.EditUser": {
            "type": "object",
            "required": [
                "age",
                "email",
                "first_name",
                "last_name",
                "phone",
                "user_name"
            ],
            "properties": {
                "age": {
                    "type": "integer"
                },
                "confirm_password": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string",
                    "maxLength": 10,
                    "minLength": 10
                },
                "user_name": {
                    "type": "string",
                    "maxLength": 15,
                    "minLength": 3
                }
            }
        },
        "request.Login": {
            "type": "object",
            "required": [
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 5
                },
                "phone": {
                    "type": "string",
                    "maxLength": 10,
                    "minLength": 10
                },
                "user_name": {
                    "type": "string",
                    "maxLength": 15,
                    "minLength": 3
                }
            }
        },
        "request.OTPLogin": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "phone": {
                    "type": "string",
                    "maxLength": 10,
                    "minLength": 10
                },
                "user_name": {
                    "type": "string",
                    "maxLength": 16,
                    "minLength": 3
                }
            }
        },
        "request.OTPVerify": {
            "type": "object",
            "required": [
                "otp"
            ],
            "properties": {
                "otp": {
                    "type": "string",
                    "maxLength": 8,
                    "minLength": 4
                },
                "otp_id": {
                    "type": "string"
                }
            }
        },
        "request.Offer": {
            "type": "object",
            "required": [
                "description",
                "discount_rate",
                "end_date",
                "offer_name",
                "start_date"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 6
                },
                "discount_rate": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 1
                },
                "end_date": {
                    "type": "string"
                },
                "offer_name": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                }
            }
        },
        "request.OfferCategory": {
            "type": "object",
            "required": [
                "category_id",
                "offer_id"
            ],
            "properties": {
                "category_id": {
                    "type": "integer"
                },
                "offer_id": {
                    "type": "integer"
                }
            }
        },
        "request.OfferProduct": {
            "type": "object",
            "required": [
                "offer_id",
                "product_id"
            ],
            "properties": {
                "offer_id": {
                    "type": "integer"
                },
                "product_id": {
                    "type": "integer"
                }
            }
        },
        "request.Product": {
            "type": "object",
            "required": [
                "category_id",
                "description",
                "image",
                "price",
                "product_name"
            ],
            "properties": {
                "category_id": {
                    "type": "integer"
                },
                "description": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 10
                },
                "image": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "product_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3
                }
            }
        },
        "request.ProductItem": {
            "type": "object",
            "required": [
                "images",
                "price",
                "product_id",
                "qty_in_stock",
                "variation_option_id"
            ],
            "properties": {
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "price": {
                    "type": "integer",
                    "minimum": 1
                },
                "product_id": {
                    "type": "integer"
                },
                "qty_in_stock": {
                    "type": "integer",
                    "minimum": 1
                },
                "sku": {
                    "type": "string"
                },
                "variation_option_id": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "request.Return": {
            "type": "object",
            "required": [
                "return_reason",
                "shop_order_id"
            ],
            "properties": {
                "return_reason": {
                    "type": "string",
                    "maxLength": 150,
                    "minLength": 6
                },
                "shop_order_id": {
                    "type": "integer"
                }
            }
        },
        "request.UpdateCartItem": {
            "type": "object",
            "required": [
                "product_item_id"
            ],
            "properties": {
                "count": {
                    "type": "integer",
                    "minimum": 1
                },
                "product_item_id": {
                    "type": "integer"
                }
            }
        },
        "request.UpdateOrder": {
            "type": "object",
            "required": [
                "shop_order_id"
            ],
            "properties": {
                "order_status_id": {
                    "type": "integer"
                },
                "shop_order_id": {
                    "type": "integer"
                }
            }
        },
        "request.UpdateOrderReturn": {
            "type": "object",
            "required": [
                "admin_comment",
                "order_return_id",
                "order_status_id"
            ],
            "properties": {
                "admin_comment": {
                    "type": "string",
                    "maxLength": 150,
                    "minLength": 6
                },
                "order_return_id": {
                    "type": "integer"
                },
                "order_status_id": {
                    "type": "integer"
                },
                "return_date": {
                    "type": "string"
                }
            }
        },
        "request.UpdateProduct": {
            "type": "object",
            "required": [
                "category_id",
                "description",
                "image",
                "price",
                "product_id",
                "product_name"
            ],
            "properties": {
                "category_id": {
                    "type": "integer"
                },
                "description": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 10
                },
                "image": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "product_id": {
                    "type": "integer"
                },
                "product_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3
                }
            }
        },
        "request.UserSignUp": {
            "type": "object",
            "required": [
                "age",
                "confirm_password",
                "email",
                "first_name",
                "last_name",
                "password",
                "phone",
                "user_name"
            ],
            "properties": {
                "age": {
                    "type": "integer"
                },
                "confirm_password": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string",
                    "maxLength": 10,
                    "minLength": 10
                },
                "user_name": {
                    "type": "string",
                    "maxLength": 15,
                    "minLength": 3
                }
            }
        },
        "request.Variation": {
            "type": "object",
            "required": [
                "category_id",
                "variation_name"
            ],
            "properties": {
                "category_id": {
                    "type": "integer"
                },
                "variation_name": {
                    "type": "string"
                }
            }
        },
        "request.VariationOption": {
            "type": "object",
            "required": [
                "variation_id",
                "variation_value"
            ],
            "properties": {
                "variation_id": {
                    "description": "a specific field of variation like color/size",
                    "type": "integer"
                },
                "variation_value": {
                    "description": "the variations value like blue/XL",
                    "type": "string"
                }
            }
        },
        "response.Response": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {},
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
