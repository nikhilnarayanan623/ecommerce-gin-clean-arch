definitions:
  domain.Category:
    properties:
      category_id:
        type: integer
      category_name:
        maxLength: 30
        minLength: 1
        type: string
    required:
    - category_name
    type: object
  request.Address:
    properties:
      area:
        type: string
      city:
        type: string
      house:
        type: string
      is_default:
        type: boolean
      land_mark:
        type: string
      name:
        maxLength: 50
        minLength: 2
        type: string
      phone_number:
        maxLength: 10
        minLength: 10
        type: string
      pincode:
        type: integer
    required:
    - house
    - land_mark
    - name
    - phone_number
    - pincode
    type: object
  request.ApplyCoupon:
    properties:
      coupon_code:
        type: string
    required:
    - coupon_code
    type: object
  request.BlockUser:
    properties:
      block:
        type: boolean
      user_id:
        type: integer
    required:
    - user_id
    type: object
  request.Coupon:
    properties:
      block_status:
        type: boolean
      coupon_name:
        maxLength: 25
        minLength: 3
        type: string
      description:
        maxLength: 150
        minLength: 6
        type: string
      discount_rate:
        maximum: 100
        minimum: 1
        type: integer
      expire_date:
        type: string
      image:
        type: string
      minimum_cart_price:
        minimum: 1
        type: integer
    required:
    - coupon_name
    - description
    - discount_rate
    - expire_date
    - image
    - minimum_cart_price
    type: object
  request.EditAddress:
    properties:
      address_id:
        type: integer
      area:
        type: string
      city:
        type: string
      house:
        type: string
      is_default:
        type: boolean
      land_mark:
        type: string
      name:
        maxLength: 50
        minLength: 2
        type: string
      phone_number:
        maxLength: 10
        minLength: 10
        type: string
      pincode:
        type: integer
    required:
    - address_id
    - house
    - land_mark
    - name
    - phone_number
    - pincode
    type: object
  request.EditCoupon:
    properties:
      block_status:
        type: boolean
      coupon_id:
        type: integer
      coupon_name:
        maxLength: 25
        minLength: 3
        type: string
      description:
        maxLength: 150
        minLength: 6
        type: string
      discount_rate:
        maximum: 100
        minimum: 1
        type: integer
      expire_date:
        type: string
      image:
        type: string
      minimum_cart_price:
        minimum: 1
        type: integer
    required:
    - coupon_name
    - description
    - discount_rate
    - expire_date
    - image
    - minimum_cart_price
    type: object
  request.EditUser:
    properties:
      age:
        type: integer
      confirm_password:
        type: string
      email:
        type: string
      first_name:
        maxLength: 50
        minLength: 2
        type: string
      last_name:
        maxLength: 50
        minLength: 1
        type: string
      password:
        type: string
      phone:
        maxLength: 10
        minLength: 10
        type: string
      user_name:
        maxLength: 15
        minLength: 3
        type: string
    required:
    - age
    - email
    - first_name
    - last_name
    - phone
    - user_name
    type: object
  request.Login:
    properties:
      email:
        type: string
      password:
        maxLength: 30
        minLength: 5
        type: string
      phone:
        maxLength: 10
        minLength: 10
        type: string
      user_name:
        maxLength: 15
        minLength: 3
        type: string
    required:
    - password
    type: object
  request.OTPLogin:
    properties:
      email:
        type: string
      phone:
        maxLength: 10
        minLength: 10
        type: string
      user_name:
        maxLength: 16
        minLength: 3
        type: string
    type: object
  request.OTPVerify:
    properties:
      otp:
        maxLength: 8
        minLength: 4
        type: string
      otp_id:
        type: string
    required:
    - otp
    type: object
  request.Offer:
    properties:
      description:
        maxLength: 50
        minLength: 6
        type: string
      discount_rate:
        maximum: 100
        minimum: 1
        type: integer
      end_date:
        type: string
      offer_name:
        type: string
      start_date:
        type: string
    required:
    - description
    - discount_rate
    - end_date
    - offer_name
    - start_date
    type: object
  request.OfferCategory:
    properties:
      category_id:
        type: integer
      offer_id:
        type: integer
    required:
    - category_id
    - offer_id
    type: object
  request.OfferProduct:
    properties:
      offer_id:
        type: integer
      product_id:
        type: integer
    required:
    - offer_id
    - product_id
    type: object
  request.Product:
    properties:
      category_id:
        type: integer
      description:
        maxLength: 100
        minLength: 10
        type: string
      image:
        type: string
      price:
        type: integer
      product_name:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - category_id
    - description
    - image
    - price
    - product_name
    type: object
  request.ProductItem:
    properties:
      images:
        items:
          type: string
        type: array
      price:
        minimum: 1
        type: integer
      product_id:
        type: integer
      qty_in_stock:
        minimum: 1
        type: integer
      sku:
        type: string
      variation_option_id:
        items:
          type: integer
        type: array
    required:
    - images
    - price
    - product_id
    - qty_in_stock
    - variation_option_id
    type: object
  request.Return:
    properties:
      return_reason:
        maxLength: 150
        minLength: 6
        type: string
      shop_order_id:
        type: integer
    required:
    - return_reason
    - shop_order_id
    type: object
  request.UpdateCartItem:
    properties:
      count:
        minimum: 1
        type: integer
      product_item_id:
        type: integer
    required:
    - product_item_id
    type: object
  request.UpdateOrder:
    properties:
      order_status_id:
        type: integer
      shop_order_id:
        type: integer
    required:
    - shop_order_id
    type: object
  request.UpdateOrderReturn:
    properties:
      admin_comment:
        maxLength: 150
        minLength: 6
        type: string
      order_return_id:
        type: integer
      order_status_id:
        type: integer
      return_date:
        type: string
    required:
    - admin_comment
    - order_return_id
    - order_status_id
    type: object
  request.UpdateProduct:
    properties:
      category_id:
        type: integer
      description:
        maxLength: 100
        minLength: 10
        type: string
      image:
        type: string
      price:
        type: integer
      product_id:
        type: integer
      product_name:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - category_id
    - description
    - image
    - price
    - product_id
    - product_name
    type: object
  request.UserSignUp:
    properties:
      age:
        type: integer
      confirm_password:
        type: string
      email:
        type: string
      first_name:
        maxLength: 50
        minLength: 2
        type: string
      last_name:
        maxLength: 50
        minLength: 1
        type: string
      password:
        type: string
      phone:
        maxLength: 10
        minLength: 10
        type: string
      user_name:
        maxLength: 15
        minLength: 3
        type: string
    required:
    - age
    - confirm_password
    - email
    - first_name
    - last_name
    - password
    - phone
    - user_name
    type: object
  request.Variation:
    properties:
      category_id:
        type: integer
      variation_name:
        type: string
    required:
    - category_id
    - variation_name
    type: object
  request.VariationOption:
    properties:
      variation_id:
        description: a specific field of variation like color/size
        type: integer
      variation_value:
        description: the variations value like blue/XL
        type: string
    required:
    - variation_id
    - variation_value
    type: object
  response.Response:
    properties:
      data: {}
      error: {}
      message:
        type: string
      success:
        type: boolean
    type: object
info:
  contact: {}
paths:
  /:
    get:
      description: after user login user will seen this page with user informations
      operationId: User Home
      responses:
        "200":
          description: Welcome Home
      security:
      - ApiKeyAuth: []
      summary: api for showing home page of user
      tags:
      - Home
  /account:
    get:
      operationId: FindUserProfile
      responses:
        "200":
          description: Successfully user account details found
        "500":
          description: faild to show user details
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for see use details
      tags:
      - User GetUserProfile
    put:
      description: user can edit user details
      operationId: UpdateUserProfile
      parameters:
      - description: input field
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.EditUser'
      responses:
        "200":
          description: successfully updated user details
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for edit user details
      tags:
      - User Account
  /account/address:
    get:
      description: user can show all address
      operationId: FindAllAddresses
      responses:
        "200":
          description: successfully got user addresses
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: failed to show user addresses
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for get all address of user
      tags:
      - User Address
    post:
      description: get a new address from user to store the the database
      operationId: AddAddress
      parameters:
      - description: Input Field
        in: body
        name: inputs
        required: true
        schema:
          $ref: '#/definitions/request.Address'
      responses:
        "200":
          description: Successfully address added
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for adding a new address for user
      tags:
      - User Address
    put:
      description: user can change existing address
      operationId: UpdateAddress
      parameters:
      - description: Input Field
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.EditAddress'
      responses:
        "200":
          description: successfully addresses updated
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: can't update the address
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for edit user address
      tags:
      - User Address
  /admin:
    get:
      operationId: AdminHome
      responses:
        "200":
          description: Admin home page
          schema:
            $ref: '#/definitions/response.Response'
      summary: api admin home
      tags:
      - Admin Home
  /admin/category:
    get:
      operationId: FindAllCategories
      parameters:
      - description: Page Number
        in: query
        name: page_number
        type: integer
      - description: Count
        in: query
        name: count
        type: integer
      responses:
        "200":
          description: Successfully found all categories
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to find all categories
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for admin get all categories
      tags:
      - Admin Category
    post:
      operationId: SaveCategory
      parameters:
      - description: Input field
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/domain.Category'
      responses:
        "200":
          description: Successfully category added
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for adminstring add a new category
      tags:
      - Admin Category
  /admin/category/sub-category:
    post:
      operationId: SaveSubCategory
      parameters:
      - description: Input field
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/domain.Category'
      responses:
        "200":
          description: Successfully sub category added
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to add sub category
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for admin add a new sub category
      tags:
      - Admin Category
  /admin/category/variation:
    post:
      operationId: SaveVariation
      parameters:
      - description: Input field
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.Variation'
      responses:
        "200":
          description: successfully variation added
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for admin add a new variation
      tags:
      - Admin Category
  /admin/category/variation-option:
    post:
      operationId: SaveVariationOption
      parameters:
      - description: Input field
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.VariationOption'
      responses:
        "200":
          description: successfully added variation option
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for admin add a new variation options
      tags:
      - Admin Category
  /admin/category/variation/{category_id}:
    get:
      operationId: FindAllVariations
      parameters:
      - description: Category ID
        in: path
        name: category_id
        required: true
        type: integer
      responses:
        "200":
          description: Successfully found all variations and its values
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for admin to find all variations and its values for a specific
        category
      tags:
      - Admin Category
  /admin/coupons:
    get:
      operationId: FindAllCoupons
      parameters:
      - description: Page Number
        in: query
        name: page_number
        type: integer
      - description: Count
        in: query
        name: count
        type: integer
      responses:
        "200":
          description: successfully go all the coupons
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: failed to get all coupons
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for admin to see all coupons
      tags:
      - Admin Coupon
    post:
      operationId: SaveCoupon
      parameters:
      - description: Input Fields
        in: body
        name: inputs
        required: true
        schema:
          $ref: '#/definitions/request.Coupon'
      responses:
        "200":
          description: successfully coupon added
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for admin to add coupon
      tags:
      - Admin Coupon
    put:
      operationId: UpdateCoupon
      parameters:
      - description: Input Field
        in: body
        name: inputs
        required: true
        schema:
          $ref: '#/definitions/request.EditCoupon'
      responses:
        "200":
          description: Successfully updated the coupon
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for admin to update the coupon
      tags:
      - Admin Coupon
  /admin/login:
    post:
      operationId: AdminLogin
      parameters:
      - description: Input Fields
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.Login'
      responses:
        "200":
          description: Successfully account created for user
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for admin to login
      tags:
      - Admin Authentication
  /admin/offers:
    delete:
      operationId: SaveOffer
      parameters:
      - description: Offer ID
        in: path
        name: offer_id
        required: true
        type: integer
      responses:
        "200":
          description: successfully offer added
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to delete offer
      tags:
      - Offers
    post:
      operationId: SaveOffer
      parameters:
      - description: input field
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.Offer'
      responses:
        "200":
          description: successfully offer added
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to add new offer
      tags:
      - Offers
  /admin/offers/:
    get:
      operationId: FindAllOffers
      parameters:
      - description: Page Number
        in: query
        name: page_number
        type: integer
      - description: Count
        in: query
        name: count
        type: integer
      responses:
        "200":
          description: successfully got all offers
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: faild to get offers
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for show all offers
      tags:
      - Offers
  /admin/offers/category:
    delete:
      operationId: RemoveCategoryOffer
      parameters:
      - description: Offer Category ID
        in: path
        name: offer_category_id
        required: true
        type: integer
      responses:
        "200":
          description: successfully offer added for category
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to remove offer from a category
      tags:
      - Offers
    get:
      operationId: FindAllCategoryOffers
      parameters:
      - description: Page Number
        in: query
        name: page_number
        type: integer
      - description: Count
        in: query
        name: count
        type: integer
      responses:
        "200":
          description: successfully got all offer_category
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: failed to get offers_category
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to get all offers of categories
      tags:
      - Offers
    post:
      operationId: SaveCategoryOffer
      parameters:
      - description: input field
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.OfferCategory'
      responses:
        "200":
          description: successfully offer added for category
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to add offer for category
      tags:
      - Offers
  /admin/offers/category/replace:
    post:
      operationId: ReplaceCategoryOffer
      parameters:
      - description: input field
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.OfferCategory'
      responses:
        "200":
          description: successfully offer replaced for category
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to add offer for category
      tags:
      - Offers
  /admin/offers/products:
    get:
      operationId: FindAllProductsOffers
      parameters:
      - description: Page Number
        in: query
        name: page_number
        type: integer
      - description: Count
        in: query
        name: count
        type: integer
      responses:
        "200":
          description: successfully got all offers_categories
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: failed to get offer_products
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to get all offers of products
      tags:
      - Offers
    post:
      operationId: SaveProductOffer
      parameters:
      - description: input field
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.OfferProduct'
      responses:
        "200":
          description: successfully offer added for product
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to add offer for product
      tags:
      - Offers
    put:
      operationId: ReplaceProductOffer
      parameters:
      - description: input field
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.OfferProduct'
      responses:
        "200":
          description: successfully offer replaced for product
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to replace a new offer on an existing offer for a product
      tags:
      - Offers
  /admin/offers/products/{offer_product_id}:
    delete:
      operationId: RemoveProductOffer
      parameters:
      - description: offer_product_id
        in: path
        name: offer_product_id
        required: true
        type: integer
      responses:
        "200":
          description: successfully offer removed from product
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid input on params
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to remove offer from product
      tags:
      - Offers
  /admin/orders:
    get:
      description: admin can see all orders in application
      operationId: FindAllShopOrders
      parameters:
      - description: Page Number
        in: query
        name: page_number
        type: integer
      - description: Count Of Order
        in: query
        name: count
        type: integer
      responses:
        "200":
          description: Successfully found all shop orders
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to find all shop orders
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to show all order
      tags:
      - Admin Orders
  /admin/orders/:
    put:
      description: admin can change User Orders status
      operationId: UpdateOrderStatus
      parameters:
      - description: input field
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.UpdateOrder'
      responses:
        "200":
          description: Successfully order status updated
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to change the status of order
      tags:
      - Admin Orders
  /admin/orders/returns:
    get:
      operationId: FindAllOrderReturns
      parameters:
      - description: Page Number
        in: query
        name: page_number
        type: integer
      - description: Count Of Order
        in: query
        name: count
        type: integer
      responses:
        "200":
          description: Successfully found all order returns
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to find all order returns
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to see all order returns
      tags:
      - Admin Orders
  /admin/orders/returns/pending:
    get:
      description: admin can see the pending return request and accept it or not
      operationId: FindAllPendingReturns
      parameters:
      - description: Page Number
        in: query
        name: page_number
        type: integer
      - description: Count Of Order
        in: query
        name: count
        type: integer
      responses:
        "200":
          description: Successfully found all pending orders return requests
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to find all pending order return requests
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to show pending return request and update it
      tags:
      - Admin Orders
    put:
      description: admin can approve, cancel etc. updating on User Orders_return
      operationId: UpdateReturnRequest
      parameters:
      - description: Input Fields
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.UpdateOrderReturn'
      responses:
        "200":
          description: successfully order_response updated
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: invalid input
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to update the order_return request from user
      tags:
      - Admin Orders
  /admin/orders/statuses:
    get:
      operationId: GetAllOrderStatuses
      responses:
        "200":
          description: Successfully found all order statuses
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: failed to get order statuses
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for admin to see all order statues for changing order's statuses
      tags:
      - Admin Orders
  /admin/payment-method:
    get:
      operationId: FindAllPaymentMethods
      responses:
        "200":
          description: Failed to find payment methods
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Successfully found all payment methods
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for get all payment methods
      tags:
      - User Payment
    put:
      operationId: UpdatePaymentMethod
      responses:
        "200":
          description: Successfully payment method updated
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Failed to bind input
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to update payment method
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for admin to update payment details
      tags:
      - Admin Payment
  /admin/products:
    get:
      operationId: FindAllProductsAdmin
      parameters:
      - description: Page Number
        in: query
        name: page_number
        type: integer
      - description: Count
        in: query
        name: count
        type: integer
      responses:
        "200":
          description: Successfully found all products
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to find all products
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for admin to show products
      tags:
      - Admin Products
    post:
      operationId: SaveProduct
      parameters:
      - description: inputs
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.Product'
      responses:
        "200":
          description: successfully product added
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to update a product
      tags:
      - Admin Products
    put:
      operationId: UpdateProduct
      parameters:
      - description: inputs
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.UpdateProduct'
      responses:
        "200":
          description: successfully product updated
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to update a product
      tags:
      - Admin Products
  /admin/products/product-items:
    post:
      operationId: SaveProductItem
      parameters:
      - description: inputs
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.ProductItem'
      responses:
        "200":
          description: Successfully product item added
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to add product-items for a specific product
      tags:
      - Admin Products
  /admin/products/product-items/{product_id}:
    get:
      operationId: FindAllProductItemsAdmin
      parameters:
      - description: product_id
        in: path
        name: product_id
        required: true
        type: integer
      responses:
        "200":
          description: successfully got all product_items for given product_id
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid input on params
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin get all product_items for a product
      tags:
      - User Products
  /admin/sales:
    get:
      operationId: FullSalesReport
      parameters:
      - description: Sales report starting date
        in: query
        name: start_date
        type: string
      - description: Sales report ending date
        in: query
        name: end_date
        type: string
      - description: Page Number
        in: query
        name: page_number
        type: integer
      - description: Count
        in: query
        name: count
        type: integer
      responses:
        "200":
          description: ecommerce_sales_report.csv
          schema:
            $ref: '#/definitions/response.Response'
        "204":
          description: No sales report found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: failed to get sales report
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to see full sales report and download it as csv
      tags:
      - Admin Sales
  /admin/stocks:
    get:
      operationId: FindAllStocks
      parameters:
      - description: Page Number
        in: query
        name: page_number
        type: integer
      - description: Count
        in: query
        name: count
        type: integer
      responses:
        "200":
          description: Successfully found all stocks
          schema:
            $ref: '#/definitions/response.Response'
        "204":
          description: No stocks found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to find all stocks
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to find all stock stock details
      tags:
      - Admin Stock
    patch:
      operationId: UpdateStock
      parameters:
      - description: Page Number
        in: query
        name: page_number
        type: integer
      - description: Order
        in: query
        name: count
        type: integer
      responses:
        "200":
          description: Successfully updated sock
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Failed to bind input
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to update stock
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to update a stock
      tags:
      - Admin Stock
  /admin/users:
    get:
      operationId: FindAllUsers
      parameters:
      - description: Page Number
        in: query
        name: page_number
        type: integer
      - description: Count
        in: query
        name: count
        type: integer
      responses:
        "200":
          description: Successfully got all users
          schema:
            $ref: '#/definitions/response.Response'
        "204":
          description: No users found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to find all users
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to find all users
      tags:
      - Admin User
  /admin/users/block:
    patch:
      operationId: BlockUser
      parameters:
      - description: inputs
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.BlockUser'
      responses:
        "200":
          description: Successfully changed block status of user
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to block or unblock user
      tags:
      - Admin User
  /carts:
    get:
      description: user can see all productItem that stored in cart
      operationId: FindCart
      responses:
        "200":
          description: Successfully find user cart items
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to get user cart
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for get all cart item of user
      tags:
      - User Cart
    put:
      description: user can increment or decrement count of a productItem in cart
        (min=1)
      operationId: UpdateCart
      parameters:
      - description: Input Field
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.UpdateCartItem'
      responses:
        "200":
          description: Successfully productItem count change on cart
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to update product item in cart
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for update product item count
      tags:
      - User Cart
  /carts/{product_item_id}:
    delete:
      description: user can remove a signle productItem full quantity from cart
      operationId: RemoveFromCart
      parameters:
      - description: Product Item ID
        in: path
        name: product_item_id
        required: true
        type: integer
      responses:
        "200":
          description: Successfully product item removed form cart
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to remove product item from cart
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for remove a product item from cart
      tags:
      - User Cart
    post:
      description: user can add a stock in product to user cart
      operationId: SaveToCart
      parameters:
      - description: Product Item ID
        in: path
        name: product_item_id
        required: true
        type: integer
      responses:
        "200":
          description: Successfully product item added to cart
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Failed to add product item into cart
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for user to add product item to cart
      tags:
      - User Cart
  /carts/checkout/payment-select-page:
    get:
      operationId: CartOrderPaymentSelectPage
      responses:
        "200":
          description: successfully order placed
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to render payment page
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for render the html page of payment select
      tags:
      - User Payment
  /carts/coupons:
    patch:
      operationId: ApplyCouponToCart
      parameters:
      - description: Input Field
        in: body
        name: inputs
        required: true
        schema:
          $ref: '#/definitions/request.ApplyCoupon'
      responses:
        "200":
          description: Successfully coupon applied to user cart
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api user to apply on cart on checkout time
      tags:
      - User Cart
  /carts/place-order/:
    post:
      operationId: PlaceOrderOnCOD
      parameters:
      - description: Address ID
        in: formData
        name: address_id
        required: true
        type: string
      responses:
        "200":
          description: successfully order placed
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: failed to save shop order
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for user to place an order on cart with COD
      tags:
      - User Cart
  /carts/place-order/razorpay-checkout:
    post:
      operationId: RazorpayCheckout
      parameters:
      - description: Address ID
        in: formData
        name: address_id
        required: true
        type: string
      responses:
        "200":
          description: successfully razorpay payment order created
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: faild to create razorpay payment order
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for create razorpay payment order
      tags:
      - User Cart
  /carts/place-order/razorpay-verify:
    post:
      operationId: RazorpayVerify
      parameters:
      - description: razorpay_order_id
        in: formData
        name: razorpay_order_id
        required: true
        type: string
      - description: razorpay_payment_id
        in: formData
        name: razorpay_payment_id
        required: true
        type: string
      - description: razorpay_signature
        in: formData
        name: razorpay_signature
        type: string
      - description: shop_order_id
        in: formData
        name: shop_order_id
        required: true
        type: string
      - description: payment_method_id
        in: formData
        name: payment_method_id
        required: true
        type: integer
      responses:
        "200":
          description: faild to veify payment
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: successfully payment completed and order approved
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api user for verify razorpay payment
      tags:
      - User Cart
  /coupons:
    get:
      operationId: GetAllCouponsForUser
      parameters:
      - description: Page Number
        in: query
        name: page_number
        type: integer
      - description: Count Of Order
        in: query
        name: count
        type: integer
      responses:
        "200":
          description: Successfully found all coupons for user
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to find all user
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for user to see all coupons
      tags:
      - User Coupon
  /login:
    post:
      description: Enter user_name | phone | email with password
      operationId: UserLogin
      parameters:
      - description: Input Fields
        in: body
        name: inputs
        required: true
        schema:
          $ref: '#/definitions/request.Login'
      responses:
        "200":
          description: successfully logged in
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: failed to generate JWT
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for user to login
      tags:
      - User Authentication
  /login/otp-send:
    post:
      description: user can enter email/user_name/phone will send an otp to user registered
        phone_number
      operationId: UserLoginOtpSend
      parameters:
      - description: Input Field
        in: body
        name: inputs
        required: true
        schema:
          $ref: '#/definitions/request.OTPLogin'
      responses:
        "200":
          description: Successfully otp send to user's registered number
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Enter input properly
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to send otp
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for user otp login send
      tags:
      - User Authentication
  /login/otp-verify:
    post:
      description: enter your otp that send to your registered number
      operationId: UserLoginOtpVerify
      parameters:
      - description: Input Field
        in: body
        name: inputs
        required: true
        schema:
          $ref: '#/definitions/request.OTPVerify'
      responses:
        "200":
          description: successfully logged in using otp
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid login_otp
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: failed to generate JWT
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for user to verify user login otp
      tags:
      - User Authentication
  /logout:
    post:
      description: user can logout
      operationId: UserLogout
      responses:
        "200":
          description: successfully logged out
      security:
      - ApiKeyAuth: []
      summary: api for user to logout
      tags:
      - User Logout
  /orders:
    get:
      description: user can see all User Orders history
      operationId: GetUserOrder
      parameters:
      - description: Page Number
        in: query
        name: page_number
        type: integer
      - description: Count Of Order
        in: query
        name: count
        type: integer
      responses:
        "200":
          description: Successfully found all shop orders
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to find all user shop orders
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for showing User Orders list
      tags:
      - User Orders
  /orders/{shop_order_id}:
    post:
      description: user can cancel the order if it's not placed
      operationId: CancelOrder
      parameters:
      - description: Shop Order ID
        in: path
        name: shop_order_id
        required: true
        type: integer
      responses:
        "200":
          description: Successfully order cancelled
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid input on param
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for user to cancel the order
      tags:
      - User Orders
  /orders/items/{shop_order_id}:
    get:
      operationId: FindAllOrderItems User
      parameters:
      - description: Shop Order ID
        in: path
        name: shop_order_id
        required: true
        type: integer
      - description: Page Number
        in: query
        name: page_number
        type: integer
      - description: Count
        in: query
        name: count
        type: integer
      responses:
        "200":
          description: Successfully found order items
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to find order items
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for show order items of a specific order
      tags:
      - User Orders
  /orders/return:
    post:
      description: user can request return for placed orders
      operationId: SubmitReturnRequest
      parameters:
      - description: Input Fields
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.Return'
      responses:
        "200":
          description: Successfully return request submitted for order
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for user to request a return for an order
      tags:
      - User Orders
  /products:
    get:
      operationId: FindAllProductsAdmin
      parameters:
      - description: Page Number
        in: query
        name: page_number
        type: integer
      - description: Count
        in: query
        name: count
        type: integer
      responses:
        "200":
          description: Successfully found all products
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to find all products
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for user to show products
      tags:
      - User Products
  /products/product-items/{product_id}:
    get:
      operationId: FindAllProductItems
      parameters:
      - description: product_id
        in: path
        name: product_id
        required: true
        type: integer
      responses:
        "200":
          description: successfully got all product_items for given product_id
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid input on params
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for user get all product_items for a product
      tags:
      - User Products
  /signup:
    post:
      operationId: UserSignUp
      parameters:
      - description: Input Fields
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.UserSignUp'
      responses:
        "200":
          description: Successfully account created for user
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for user to signup
      tags:
      - User Authentication
  /wishlist:
    delete:
      operationId: RemoveFromWishList
      responses:
        "200":
          description: successfully removed product item from wishlist
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api to remove a productItem from wish list
      tags:
      - Wishlist
    get:
      operationId: FindWishList
      responses:
        "200":
          description: Wish list is empty
        "400":
          description: failed to get user wish list items
      security:
      - ApiKeyAuth: []
      summary: api get all wish list items of user
      tags:
      - Wishlist
    post:
      operationId: SaveToWishList
      parameters:
      - description: product_item_id
        in: body
        name: product_item_id
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: successfully added product item to wishlist
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api to add a productItem to wish list
      tags:
      - Wishlist
swagger: "2.0"
